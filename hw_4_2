import torch
import torch.nn as nn
import torch.nn.functional as F

import numpy as np
from imageio import imread
from torch.utils.data import Dataset, DataLoader
from torch.utils.tensorboard import SummaryWriter

from glob import glob

import matplotlib.pyplot as plt

writer = SummaryWriter(comment='Segmentation')

torch.manual_seed(2023)

paths = glob("./stage1_train/*")


class DSB2018(Dataset):
    def __init__(self, paths):
        self.paths = paths

    def __len__(self):
        return len(self.paths)

    def __getitem__(self, idx):
        img_path = glob(self.paths[idx] + "/images/*")[0]
        mask_imgs = glob(self.paths[idx] + "/masks/*")
        img = imread(img_path)[:, :, 0:3]
        img = np.moveaxis(img, -1, 0)
        img = img / 255.0
        masks = [imread(f) / 255.0 for f in mask_imgs]
        final_mask = np.zeros(masks[0].shape)
        for m in masks:
            final_mask = np.logical_or(final_mask, m)
        final_mask = final_mask.astype(np.float32)
        img, final_mask = torch.tensor(img), torch.tensor(final_mask).unsqueeze(0)
        img = F.interpolate(img.unsqueeze(0), (256, 256))
        final_mask = F.interpolate(final_mask.unsqueeze(0), (256, 256))
        return img.type(torch.FloatTensor)[0], final_mask.type(torch.FloatTensor)[0]

dsb_data = DSB2018(paths)

train_split, test_split = torch.utils.data.random_split(dsb_data, [500, len(dsb_data)-500])
train_seg_loader = DataLoader(train_split, batch_size=1, shuffle=True)
test_seg_loader = DataLoader(test_split,  batch_size=1)

loss_func = nn.BCEWithLogitsLoss()


class Unit(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(3, 32, 3, 1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, 3, 1, padding=1)
        self.conv3 = nn.Conv2d(64, 1, 3, 1, padding=1)

    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = F.relu(x)
        x = self.conv3(x)

        return F.sigmoid(x)


num_epochs = 5

model = Unit()
optimizer = torch.optim.Adam(model.parameters(), lr=1e-5)

for epoch in range(num_epochs):
    model.train()
    for x, y in train_seg_loader:
        optimizer.zero_grad()
        prediction = model(x)
        loss = loss_func(prediction, y)

        loss.backward()
        optimizer.step()

model.load_state_dict(torch.load('./cnn.pt'))

sample_data = test_split[6][0].unsqueeze(0)
prediction = model(sample_data)
prediction_image = prediction >= 0.5 * 1
plt.imshow(prediction_image[0,0,:], cmap='gray')
plt.show()
